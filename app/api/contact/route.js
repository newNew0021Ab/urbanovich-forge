import { NextResponse } from 'next/server'
import fs from 'fs/promises'
import path from 'path'

export async function POST(request) {
  try {
    const body = await request.json()
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const { name, phone, city, workType } = body
    
    if (!name || !phone || !city || !workType) {
      return NextResponse.json(
        { error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–æ—Å—Ç–∞—è)
    const phoneRegex = /^\+?[0-9\s\-\(\)]{10,}$/
    if (!phoneRegex.test(phone)) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞' },
        { status: 400 }
      )
    }

    // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
    const requestData = {
      id: Date.now().toString(),
      timestamp: new Date().toISOString(),
      name: name.trim(),
      phone: phone.trim(),
      city: city.trim(),
      workType: workType.trim(),
      message: body.message || '',
      status: 'new'
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log('üìû –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:', {
      name: requestData.name,
      phone: requestData.phone,
      city: requestData.city,
      workType: requestData.workType
    })

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
    const hasEmailConfig = process.env.SMTP_HOST || process.env.SENDGRID_API_KEY
    
    if (hasEmailConfig) {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
      console.log('üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    } else {
      console.log('üìù Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª')
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    const dataDir = path.join(process.cwd(), 'data')
    const filePath = path.join(dataDir, 'requests.json')
    
    try {
      await fs.mkdir(dataDir, { recursive: true })
      
      let requests = []
      try {
        const fileContent = await fs.readFile(filePath, 'utf-8')
        requests = JSON.parse(fileContent)
      } catch (error) {
        // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π
        requests = []
      }
      
      requests.unshift(requestData) // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –≤ —Ñ–∞–π–ª–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
      if (requests.length > 100) {
        requests = requests.slice(0, 100)
      }
      
      await fs.writeFile(filePath, JSON.stringify(requests, null, 2))
      
    } catch (fileError) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª:', fileError)
    }

    return NextResponse.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      requestId: requestData.id
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error)
    
    return NextResponse.json(
      { error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' },
      { status: 500 }
    )
  }
}